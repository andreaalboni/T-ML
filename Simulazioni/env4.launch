<?xml version="1.0"?>
<launch>
	<arg name="quad_name" default="hummingbird" />
	<arg name="mav_name" default="$(arg quad_name)" />
	<arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
	<arg name="world_name" default="$(find rotors_gazebo)/worlds/env4.world" />
	<arg name="use_unity_editor" default="false" />
	<arg name="paused" value="true" />
    <arg name="gui" value="true" />
	<arg name="use_mpc" default="false" />
	<arg name="use_ground_truth" default="true" />
	<arg name="enable_ground_truth" default="true" />
	<arg name="enable_command_feedthrough" default="false" />
	<arg name="custom_models" default="" />
	<arg name="enable_logging" default="false" />

	<arg name="debug" default="false" />
	<arg name="verbose" default="false" />
	<param name="use_sim_time" value="true" />

	<arg name="use_quad1" default="1" />
	<arg name="use_quad2" default="1" />
	<arg name="use_quad3" default="1" />
	<arg name="use_quad4" default="1" />
	<arg name="use_quad5" default="1" />
	<arg name="use_quad6" default="0" />
	<arg name="use_quad7" default="0" />
	<arg name="use_quad8" default="0" />
	<arg name="use_quad9" default="0" />
	<arg name="use_quad10" default="0" />
	<arg name="use_quad11" default="0" />
	<arg name="use_quad12" default="0" />
	<arg name="use_quad13" default="0" />
	<arg name="use_quad14" default="0" />
	<arg name="use_quad15" default="1" />

	<!-- Gazebo stuff to spawn the world ! -->
	<env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(arg custom_models)" />
	<env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models" />
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(arg world_name)" />
		<arg name="debug" value="$(arg debug)" />
		<arg name="paused" value="$(arg paused)" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="verbose" value="$(arg verbose)" />
		<!-- <arg name="z" value="-1000.0"/> -->
	</include>
<!-- ================================================  Spawn the quadrotor ================================================  -->
<group if="$(arg use_quad1)" ns="$(arg mav_name)1">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)1" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)1" />
		<arg name="x" value="40" />
		<arg name="y" value="14.2" />
		<arg name="z" value="1" />
		<arg name="yaw" value="2.356" />
	</include>
</group>
<group if="$(arg use_quad2)" ns="$(arg mav_name)2">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)2" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)2" />
		<arg name="x" value="72.5" />
		<arg name="y" value="17.8" />
		<arg name="z" value="1" />
		<arg name="yaw" value="0.785" />
	</include>
</group>
<group if="$(arg use_quad3)" ns="$(arg mav_name)3">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)3" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)3" />
		<arg name="x" value="138.3" />
		<arg name="y" value="35" />
		<arg name="z" value="1" />
		<arg name="yaw" value="-0.785" />
	</include>
</group>
<group if="$(arg use_quad4)" ns="$(arg mav_name)4">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)4" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)4" />
		<arg name="x" value="175.8" />
		<arg name="y" value="22.1" />
		<arg name="z" value="2" />
		<arg name="yaw" value="0.0" />
	</include>
</group>
<group if="$(arg use_quad5)" ns="$(arg mav_name)5">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)5" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)5" />
		<arg name="x" value="102.8" />
		<arg name="y" value="51.4" />
		<arg name="z" value="1" />
		<arg name="yaw" value="3.14" />
	</include>
</group>
<group if="$(arg use_quad6)" ns="$(arg mav_name)6">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)6" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)6" />
		<arg name="x" value="172.28" />
		<arg name="y" value="22.61" />
		<arg name="z" value="1" />
		<arg name="yaw" value="-2.356" />
	</include>
</group>
<group if="$(arg use_quad7)" ns="$(arg mav_name)7">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)7" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)7" />
		<arg name="x" value="223.32" />
		<arg name="y" value="67.9" />
		<arg name="z" value="-5" />
		<arg name="yaw" value="2.356" />
	</include>
</group>
<group if="$(arg use_quad8)" ns="$(arg mav_name)8">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)8" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)8" />
		<arg name="x" value="323.25" />
		<arg name="y" value="30.97" />
		<arg name="z" value="-2.5" />
		<arg name="yaw" value="0.785" />
	</include>
</group>
<group if="$(arg use_quad9)" ns="$(arg mav_name)9">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)9" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)9" />
		<arg name="x" value="119.4" />
		<arg name="y" value="100.88" />
		<arg name="z" value="1" />
		<arg name="yaw" value="-0.785" />
	</include>
</group>
<group if="$(arg use_quad10)" ns="$(arg mav_name)10">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)10" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)10" />
		<arg name="x" value="257.8" />
		<arg name="y" value="42.5" />
		<arg name="z" value="1" />
		<arg name="yaw" value="0.0" />
	</include>
</group>
<group if="$(arg use_quad11)" ns="$(arg mav_name)11">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)11" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)11" />
		<arg name="x" value="131.5" />
		<arg name="y" value="43.5" />
		<arg name="z" value="1" />
		<arg name="yaw" value="3.14" />
	</include>
</group>
<group if="$(arg use_quad12)" ns="$(arg mav_name)12">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)12" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)12" />
		<arg name="x" value="74" />
		<arg name="y" value="41.3" />
		<arg name="z" value="-1" />
		<arg name="yaw" value="-2.356" />
	</include>
</group>
<group if="$(arg use_quad13)" ns="$(arg mav_name)13">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)13" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)13" />
		<arg name="x" value="110" />
		<arg name="y" value="85.5" />
		<arg name="z" value="3.2" />
		<arg name="yaw" value="-2.356" />
	</include>
</group>
<group if="$(arg use_quad14)" ns="$(arg mav_name)14">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)14" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)14" />
		<arg name="x" value="110" />
		<arg name="y" value="81.5" />
		<arg name="z" value="3.2" />
		<arg name="yaw" value="-2.356" />
	</include>
</group>
<group if="$(arg use_quad15)" ns="$(arg mav_name)0">
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<arg name="namespace" value="$(arg mav_name)0" />
		<arg name="model" value="$(arg model)" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg mav_name)0" />
		<arg name="x" value="60.5" />
		<arg name="y" value="77" />
		<arg name="z" value="1" />
		<arg name="yaw" value="-2.356" />
	</include>
</group>
  <!-- ================================================  RPG stuff 1 ================================================  -->

<group if="$(arg use_quad1)" ns="$(arg quad_name)1">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_1" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 2 ================================================  -->

<group if="$(arg use_quad2)" ns="$(arg quad_name)2">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_2" output="screen" ns="$arg quad_nae"> -->
</group>
  <!-- ================================================  RPG stuff 3 ================================================  -->

<group if="$(arg use_quad3)" ns="$(arg quad_name)3">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>

<!-- ================================================  RPG stuff 4 ================================================  -->

<group if="$(arg use_quad4)" ns="$(arg quad_name)4">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_1" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 5 ================================================  -->

<group if="$(arg use_quad5)" ns="$(arg quad_name)5">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_2" output="screen" ns="$arg quad_nae"> -->
</group>
  <!-- ================================================  RPG stuff 6 ================================================  -->

<group if="$(arg use_quad6)" ns="$(arg quad_name)6">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 7 ================================================  -->

<group if="$(arg use_quad7)" ns="$(arg quad_name)7">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 8 ================================================  -->

<group if="$(arg use_quad8)" ns="$(arg quad_name)8">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_1" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 9 ================================================  -->

<group if="$(arg use_quad9)" ns="$(arg quad_name)9">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_2" output="screen" ns="$arg quad_nae"> -->
</group>
  <!-- ================================================  RPG stuff 10 ================================================  -->

<group if="$(arg use_quad10)" ns="$(arg quad_name)10">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>

<!-- ================================================  RPG stuff 11 ================================================  -->

<group if="$(arg use_quad11)" ns="$(arg quad_name)11">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_1" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 12 ================================================  -->

<group if="$(arg use_quad12)" ns="$(arg quad_name)12">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_2" output="screen" ns="$arg quad_nae"> -->
</group>
  <!-- ================================================  RPG stuff 13 ================================================  -->

<group if="$(arg use_quad13)" ns="$(arg quad_name)13">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 14 ================================================  -->

<group if="$(arg use_quad14)" ns="$(arg quad_name)14">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  <!-- ================================================  RPG stuff 15 ================================================  -->

<group if="$(arg use_quad15)" ns="$(arg quad_name)0">
	<!-- RPG RotorS interface. -->
	<node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen">
		<rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
		<!-- .. -->
		<remap from="odometry" to="ground_truth/odometry" />
		<remap from="rpg_rotors_interface/arm" to="bridge/arm" />
	</node>
	<!-- Autopilot -->
	<node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
		<rosparam file="$(find state_predictor)/parameters/$(arg quad_name).yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
		<rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
		<param name="position_controller/use_rate_mode" value="True" />
		<param name="velocity_estimate_in_world_frame" value="false" />
		<param name="state_estimate_timeout" value="0.1" />
		<param name="control_command_delay" value="0.05" />

		<param name="go_to_pose_max_velocity" value="10.00" />
		<param name="go_to_pose_max_normalized_thrust" value="20.00" />
		<param name="go_to_pose_max_roll_pitch_rate" value="1.5" />
		
		<param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
		<remap from="autopilot/state_estimate" to="ground_truth/odometry" />
	</node>
	<!-- <node pkg="fow_control" type="fow_control_hover" name="hover_node_3" output="screen"/> -->
</group>
  
<group if="$(arg use_quad1)" ns="$(arg quad_name)1">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)1/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)1/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)1/autopilot/velocity_command" />
	</node>
</group>
  
<group if="$(arg use_quad2)" ns="$(arg quad_name)2">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)2/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)2/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)2/autopilot/velocity_command" />
	</node>
</group>
  
<group if="$(arg use_quad3)" ns="$(arg quad_name)3">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)3/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)3/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)3/autopilot/velocity_command" />
	</node>
</group>

<group if="$(arg use_quad4)" ns="$(arg quad_name)4">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)4/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)4/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)4/autopilot/velocity_command" />
	</node>
</group>
 
<group if="$(arg use_quad5)" ns="$(arg quad_name)5">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)5/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)5/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)5/autopilot/velocity_command" />
	</node>
</group>

<group if="$(arg use_quad6)" ns="$(arg quad_name)6">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)6/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)6/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)6/autopilot/velocity_command" />
	</node>
</group>

<group if="$(arg use_quad7)" ns="$(arg quad_name)7">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)7/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)7/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)7/autopilot/velocity_command" />
	</node>
</group>
  
<group if="$(arg use_quad8)" ns="$(arg quad_name)8">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)8/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)8/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)8/autopilot/velocity_command" />
	</node>
</group>

  
<group if="$(arg use_quad9)" ns="$(arg quad_name)9">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)9/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)9/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)9/autopilot/velocity_command" />
	</node>
</group>

<group if="$(arg use_quad10)" ns="$(arg quad_name)10">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)10/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)10/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)10/autopilot/velocity_command" />
	</node>
</group>
 
<group if="$(arg use_quad11)" ns="$(arg quad_name)11">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)11/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)11/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)11/autopilot/velocity_command" />
	</node>
</group>

<group if="$(arg use_quad12)" ns="$(arg quad_name)12">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)12/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)12/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)12/autopilot/velocity_command" />
	</node>
</group>

<group if="$(arg use_quad13)" ns="$(arg quad_name)13">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)13/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)13/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)13/autopilot/velocity_command" />
	</node>
</group>

<group if="$(arg use_quad14)" ns="$(arg quad_name)14">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)14/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)14/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)14/autopilot/velocity_command" />
	</node>
</group>

<group if="$(arg use_quad15)" ns="$(arg quad_name)0">
	<node pkg="my_gmm" type="up.py" name="up" output="screen">
		<remap from="/bridge/arm" to="/$(arg quad_name)0/bridge/arm" />
		<remap from="/autopilot/start" to="/$(arg quad_name)0/autopilot/start" />
		<remap from="/autopilot/velocity_command" to="/$(arg quad_name)0/autopilot/velocity_command" />
	</node>
</group>

  <!-- ================================================  Flightmare Render ================================================  -->


<!-- RViz -->
<!-- <node type="rviz" name="rviz" pkg="rviz" /> -->
</launch> 
